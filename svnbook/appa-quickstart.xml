<appendix xml:id="svn.intro">
    <info>
      <title>Subversion 快速入门指南</title>
    </info>
    <para>如果你渴望快速配置Subversion并运行(而且你喜欢通过实验学习)，本章会展示如何创建版本库，导入代码，然后以工作拷贝检出，继续我们会给出本书的相关章节的链接。</para>
    <warning>
      <para>如果读者还不熟悉版本控制，以及在Subversion和CVS中使用的<quote>拷贝-修改-合并</quote>模型这些基础的概念，那么建议在进一步学习之前，首先阅读<xref linkend="svn.basic"/>。</para>
    </warning>
    <!-- ================================================================= -->
    <!-- ================================================================= -->
    <!-- ================================================================= -->
    <section xml:id="svn.intro.install">
      <info>
        <title>安装 Subversion</title>
      </info>
      <para>Subversion是基于APR构建的。APR全称为Apache Portable Runtime library，是一个移植性很好的程序库。APR库提供了全部与操作系统相关的操作接口，如磁盘访问、内存管理等等，这使得Subversion自身能够在不加修改的情况下运行于不同的操作系统之上。Subversion对APR的依赖并不意味着必须使用Apache作为它的网络服务器程序，相反，Apache只是Subversion支持的网络服务器程序之一。APR是一个独立的程序库，任何应用程序都可以使用它(Apache也是基于它开发的)。这就是说，Subversion能够在所有可运行Apache服务器的操作系统上运转，如Windows、Linux、各种BSD、Mac OS X、Netware等等。</para>
      <para>最简单的安装Subversion的方法就是下载与你的操作系统对应的二进制程序包。在Subversion的网站(<uri href="http://subversion.tigris.org">http://subversion.tigris.org</uri>)上通常可以找到由志愿者提供下载的程序包。在这个网站上，会提供微软操作系统上的图形化应用程序安装包。而对于类Unix系统，则可以使用其自身的程序包系统(PRMs、DEBs、ports tree等等)来获取Subversion。</para>
      <para>此外，还可以通过编译源代码包直接生成Subversion程序，尽管这不是一件简单的任务(如果你没有构建过开源软件包，你最好下载二进制发布版本)。首先，从Subversion网站下载最新的源代码包，然后解压缩。然后，根据<filename>INSTALL</filename>文件的指示进行编译。需要注意的是，正式发布的源代码包中可能没有包含构建命令行客户端工具所需的全部内容，从Subversion1.4开始，所有依赖的库(如apr，apr-util和neno库)以<filename>-deps</filename>为名称单独发布，这些库应该可以满足你在你的系统上的安装，你需要将依赖库解压缩到Subversion源程序相同的目录。但是一些可选的组件则依赖于其它一些程序库，如Berkeley DB和Apache httpd。因此，如果想要进行完整的编译，请根据<filename>INSTALL</filename>文件中的内容确认这些程序库是否可用。</para>
      <para>如果你是一个喜欢使用最新软件的人，你可以从Subversion本身的版本库得到Subversion最新的源代码，显然，你首先需要一个Subversion客户端，有了之后，你就可以从<uri href="http://svn.collab.net/repos/svn/trunk/">http://svn.collab.net/repos/svn/trunk/</uri>检出一个Subversion源代码的工作拷贝：<footnote><para>注意上面例子中检出的URL并不是以<literal>svn</literal>结尾，而是它的一个叫做<literal>trunk</literal>的子目录，可以看我们对Subversion的分支和标签模型的讨论来理解背后的原因。</para></footnote></para>
      <screen>
$ svn checkout http://svn.collab.net/repos/svn/trunk subversion
A    subversion/HACKING
A    subversion/INSTALL
A    subversion/README
A    subversion/autogen.sh
A    subversion/build.conf
…
</screen>
      <para>上面的命令会检出一个流血的，最新的Subversion源代码版本到你的叫做<filename>subversion</filename>的当前工作目录。很明显，你可以调整最后的参数改为你需要的。不管你怎么称呼你的新的工作拷贝目录，在操作之后，你现在已经有了Subversion的源代码。当然，你还是需要得到一些帮助库(apr，apr-util等等)—见工作拷贝根目录的<filename>INSTALL</filename>来得到更多细节。</para>
    </section>
    <!-- ================================================================= -->
    <!-- ================================================================= -->
    <!-- ================================================================= -->
    <section xml:id="svn.intro.quickstart">
      <info>
        <title>快速指南</title>
      </info>
      <blockquote>
        <para>
          <quote>请确定你坐在了正确的位置，你的盘桌已经关闭，乘务员们，准备起飞…。</quote>
        </para>
      </blockquote>
      <para>这是一个非常高层次的教程，能够帮助你熟悉Subversion的基本配置和操作，在结束这个教程时，你一定能够对Subversion的典型使用有了一个基础的认识。</para>
      <note>
        <para>运行下面的例子需要首先正确安装Subversion客户端程序<command>svn</command>以及管理工具<command>svnadmin</command>，并且必须为1.2或更新版本的Subversion程序(可以运行<command>svn --version</command>来检查Subversion的版本。)</para>
      </note>
      <para>Subversion的所有版本化数据都储存在中心版本库中。因此首先，我们需要创建一个版本库：</para>
      <screen>
$ svnadmin create /var/svn/repos
$ ls /var/svn/repos
conf/  dav/  db/  format  hooks/  locks/  README.txt
</screen>
      <para>这个命令创建了一个新目录<filename>/var/svn/repos</filename>，并在其中创建了一个Subversion版本库。这个目录里主要保存了一些数据库文件(还有其它一些文件)，而不像CVS那样保存着版本化的文件。需要更多版本库创建和维护方面的内容，参见<xref linkend="svn.reposadmin"/>。</para>
      <para>在Subversion没有<quote>项目</quote>的概念。Subversion的版本库只是一个虚拟的版本化文件系统，可以存放你想要存放的任何文件。有些管理员喜欢为每个项目建立一个独立的版本库，而另外一些管理员则喜欢将多个项目存放到同一个版本库的不同目录里。这两种方式各有各的优点，关于这方面内容的叙述，参见<xref linkend="svn.reposadmin.projects.chooselayout"/>。不论是哪一种方式，版本库都只是负责管理文件和目录，而<quote>项目</quote>则是人为指定的概念。因此，尽管本书中遍布着项目这个词，但是请记住我们只不过是在谈论版本库中的某些特定目录(或者是一组目录)。</para>
      <para>在这个例子中，我们假定已经有一些需要导入到Subversion版本库的条目(一组文件和目录)。接下来，我们需要把这些条目整理到一个名为<filename>myproject</filename>的目录(或者其它任意目录)里。在这个目录下，创建三个顶级子目录：<filename>branches</filename>、<filename>tags</filename>和<filename>trunk</filename>，这样做的原因将在后文中阐述。之后，将所有需版本化的数据保存到<filename>trunk</filename>目录下，同时保持<filename>branches</filename>和<filename>tags</filename>目录为空：</para>
      <screen>
/tmp/myproject/branches/
/tmp/myproject/tags/
/tmp/myproject/trunk/
                     foo.c
                     bar.c
                     Makefile
                     …
</screen>
      <para><filename>branches</filename>、<filename>tags</filename>和<filename>trunk</filename>这三个子目录不是Subversion必须的。但这样做是Subversion的习惯用法，我们还是遵守这个约定吧。</para>
      <para>准备好了数据之后，就可以使用<command>svn import</command>命令(参见<xref linkend="svn.tour.importing"/>)将其导入到版本库中：</para>
      <screen>
$ svn import /tmp/myproject file:///var/svn/repos/myproject -m "initial import"
Adding         /tmp/myproject/branches
Adding         /tmp/myproject/tags
Adding         /tmp/myproject/trunk
Adding         /tmp/myproject/trunk/foo.c
Adding         /tmp/myproject/trunk/bar.c
Adding         /tmp/myproject/trunk/Makefile
…
Committed revision 1.
$ 
</screen>
      <para>现在版本库中已经保存了目录中的数据。如前所述，直接查看版本库是看不到文件和目录的；它们存放在数据库之中。但是版本库的虚拟文件系统中则包含了一个名为<filename>myproject</filename>的顶级目录，其中依此保存了所有的数据。</para>
      <para>注意我们在一开始创建的那个<filename>/tmp/myproject</filename>目录并没有改变，Subversion并不在意它(事实上，完全可以删除这个目录)。要开始使用版本库数据，我们还要创建一个新的用于存储数据的<quote>工作拷贝</quote>，这是一个私有工作区。从Subversion版本库里<quote>检出</quote>一个<filename>myproject/trunk</filename>目录工作拷贝的操作如下：</para>
      <screen>
$ svn checkout file:///var/svn/repos/myproject/trunk myproject
A  myproject/foo.c
A  myproject/bar.c
A  myproject/Makefile
…
Checked out revision 1.
</screen>
      <para>现在，在<filename>myproject</filename>目录下生成了一个版本库数据的独立拷贝。我们可以在这个工作拷贝中编辑文件，并将修改提交到版本库中。</para>
      <itemizedlist>
        <listitem>
          <para>进入工作拷贝目录，编辑某个文件的内容。</para>
        </listitem>
        <listitem>
          <para>运行<command>svn diff</command>以标准差别格式查看修改的内容。</para>
        </listitem>
        <listitem>
          <para>运行<command>svn commit</command>将更改提交到版本库中。</para>
        </listitem>
        <listitem>
          <para>运行<command>svn update</command><quote>更新</quote>工作拷贝。</para>
        </listitem>
      </itemizedlist>
      <para>完整的工作拷贝操作指南，请参见<xref linkend="svn.tour"/>。</para>
      <para>现在，Subversion版本库可以通过网络方式访问。参考<xref linkend="svn.serverconfig"/>，了解不同服务器软件的使用以及配置方法。</para>
      <!-- ### TODO: Let's make this into a full tutorial, rather than
             simply referring off to other sections. ### -->
    </section>
  </appendix>
  <!--
local variables: 
sgml-parent-document: ("book.xml" "appendix")
end:
-->