<chapter id="design">
  <title>设计</title>

  <section id="goals">
    <title>目标</title>

    <para>
       &devel-product-name;目标是:
      <itemizedlist spacing="compact">
	<listitem>
	  <para>
	    <emphasis role=bold>一次解决所有的整合问题</emphasis>。
	  </para>
	</listitem>
	<listitem>
	  <para>
	    在Bug跟踪系统里提供SCM动作的同步确认检查。
	  </para>
	</listitem>
	<listitem>
	  <para>
	    提供一个灵活的架构，能够架设在有安全保证的公共网络上。能够整合网络中不同SCM系统的版本库，对应一个单一的，公共进入的Bug跟踪系统，为不同地域的开发者使用。
	  </para>
	</listitem>
	<listitem>
	  <para>
	    定义一个SCM和Bug跟踪系统的整合接口和架构，可以允许任何一个SCM系统和Bug跟踪系统的整合。
	  </para>
	</listitem>
	<listitem>
	  <para>
	    整合最流行的开源SCM系统，如CVS,Subversion和Arch。
	  </para>
	</listitem>
	<listitem>
	  <para>
	    整合最流行的开源Bug跟踪系统，如Bugzilla和Mantis。
	  </para>
	</listitem>
      </itemizedlist>

    </para>

  </section>

  <section id="system-architecture">
    <title>系统架构</title>

    <para>
      &devel-product-name;是一个C/S结构。如图<xref linkend="fig-system-architecture">,它包含一个SCM系统的钩子--用来捕获标准的SCM事件，一个通用的结构在SCM版本库的机器上来处理这些事件，一个服务器进程来传输这些相应事件的整合请求，一个通用的结构来处理这些请求，最后还有一个功能就是针对每一个不同的Bug跟踪系统来处理这些请求。
    </para>
    
    <figure id="fig-system-architecture">
      <title>
	系统架构.
      </title>
      <mediaobject>
	<imageobject>
	  <imagedata
	    fileref="../images/system_architecture.jpg"
	    format="JPG"
	    align="center">
	</imageobject>
	<imageobject>
	  <imagedata
	    fileref="../images/system_architecture.eps"
	    format="PS"
	    align="center"
	    scale="80">
	</imageobject>
      </mediaobject>
    </figure>
    
    <para>
      当各种各样的SCM事件发生的时候，如提交软件修改或者标记一个版本库，他们会被Scmbug安装的钩子捕获。在这些事件活动允许继续进行之前，各种确认检查会被像在<xref linkend="verification-checks">中描述的一样执行。这些检查是同步的;当错误发生时，事件活动将被终止。
    </para>
  
  </section>



  <section id="related-systems">

    <title>
      相关的系统
    </title>
    
    <para>
      &devel-product-name;不是最初的工作。大多数整合特性分布在各种相关的系统中，这些特性最初是由John C. Quillan在CVS和Bugzilla中构思和实现的。他工作不同的特性是确认检查的同步和一个与<xref linkend="vdd">描述的相似的工具<xref linkend="vdd" endterm="vdd-short">。他的工作从来没有攻来的发不过。Scmbug尝试继续一个重新设计的，简单实现的，支持更多种SCM和Bug跟踪系统的工具。
    </para>

    <para>
      其他整合SCM和Bug跟踪系统的系统如下。与Quillan's的工作一样，这些解决方案都不适合特定的开发环境。
    </para>



    <section id="bugzilla-watcher">
      <title>Bugzilla Email Gateway</title>

      <para>
	SCM系统能够用Bugzilla email gateway整合Bugzilla。安装在SCM系统中的钩子脚本能够把系统的行为发邮件通知给配置好的账户并且相应的处理它。相应的例子请看<ulink
	url="http://www.einval.com/~steve/software/cvs-bugzilla/">
	<citetitle>Steve McIntyre's</citetitle></ulink>。
      </para>

      <para>
	这个方法不是同步的。比如，如果一个用户意外的提交了一个错误的bug号，或者不属于他的bug，SCM系统同样会处理这个提交，不给他选择去修改。另外，如果emai gateway不是活动的，开发者将不会立即知道整合失败。
      </para>

    </section>



    <section id="cvszilla">
      <title>CVSZilla</title>
      
      <para>
	Tony Garnock-Jones的<ulink
	url="http://homepages.kcbbs.gen.nz/~tonyg/">
	<citetitle>CVSZilla</citetitle></ulink>把CVS和Bugzilla整合在一起。它还把CVS扩展成可以支持“change-sets”，或者“transactions”。
      </para>
      
      <para>
	CVSZilla不支持SCM系统在通用模式下的整合。它需要修改Bugzilla的模式并且不支持将来版本的Bugzilla。最后，它假设MySQL用的TCP端口是可以被CVS版本库的机器访问的。
      </para>

      <para>
	最后的假设不总是正确的，尤其是当bug跟踪系统被用来跟踪移动开发者（笔记本用户）的开发时，需要灵活的使本地和远程在多个项目，跨不同的组织单位都能工作。经验表明在一个有限的硬件，软件，人力资源环境下--就像在一个学院里，这样的情景是经常发生的。
      </para>

      <para>
	例如，想像一个人的笔记本上装有CVS版本库和需要从互联网公共接入的Bugzilla。这个相同的bug跟踪系统还用来和搭建在第三台机器上其他不同组织的项目合作。通过互联网整合是不可能不打开Bugzilla用的MySQL端口。打开这个端口就会存在安全隐患，把在相同机器上其他应用程序暴露在不安全的环境下。&devel-product-name;后台进程只暴露整合需要的最小接口。
      </para>

    </section>


    
    <section id="other-integration-systems">
      <title>其他整合系统</title>
      
      <para>
	商业产品只集中在某一种特别的SCM系统和某一种特别的bug跟踪系统，以一种专有的方式。他们不会定义一个公用的SCM到bug跟踪系统的整合接口，不会一次解决整合的所有问题。
      </para>

      <para>
	&devel-product-name;努力定义一种SCM到bug跟踪系统整合接口和结构，可以允许把任何SCM系统和任何的bug跟踪系统整合起来。
      </para>
      
    </section>


  </section>
  
</chapter>
